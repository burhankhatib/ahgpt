/*!
 * Al Hayat GPT Widget SDK v2.0
 * Built from scratch for guest-only mode with enhanced features
 * 
 * Features:
 * - Guest-only mode (no authentication required)
 * - Automatic language detection with RTL support
 * - Source website tracking via lastName
 * - Sanity sync for chat persistence
 * - Domain-based access control
 * - Fixed height configuration
 * - HTML rendering for assistant responses
 * 
 * Copyright (c) 2024 Al Hayat GPT
 * Licensed under MIT License
 */

(function() {
    'use strict';
    
    // Al Hayat GPT Widget SDK v2.0 - Complete Rebuild
// Built from scratch based on the main chat component
class WidgetError extends Error {
    constructor(message, code, retryable = false, details) {
        super(message);
        this.code = code;
        this.retryable = retryable;
        this.details = details;
        this.name = 'WidgetError';
    }
}
// Error codes
const ErrorCodes = {
    CONTAINER_NOT_FOUND: 'CONTAINER_NOT_FOUND',
    IFRAME_LOAD_FAILED: 'IFRAME_LOAD_FAILED',
    DOMAIN_BLOCKED: 'DOMAIN_BLOCKED',
    NETWORK_ERROR: 'NETWORK_ERROR',
    INITIALIZATION_FAILED: 'INITIALIZATION_FAILED',
    CHAT_ERROR: 'CHAT_ERROR'
};
// Language detection utilities (simplified version from main app)
class LanguageDetector {
    static detectLanguage(text) {
        if (!text.trim())
            return { language: 'en', confidence: 0 };
        // Arabic detection
        const arabicRegex = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/;
        const arabicChars = (text.match(arabicRegex) || []).length;
        const arabicRatio = arabicChars / text.length;
        if (arabicRatio > 0.3) {
            return { language: 'ar', confidence: Math.min(arabicRatio * 2, 1) };
        }
        // Hebrew detection
        const hebrewRegex = /[\u0590-\u05FF]/;
        const hebrewChars = (text.match(hebrewRegex) || []).length;
        const hebrewRatio = hebrewChars / text.length;
        if (hebrewRatio > 0.3) {
            return { language: 'he', confidence: Math.min(hebrewRatio * 2, 1) };
        }
        // Chinese detection
        const chineseRegex = /[\u4e00-\u9fff]/;
        const chineseChars = (text.match(chineseRegex) || []).length;
        const chineseRatio = chineseChars / text.length;
        if (chineseRatio > 0.1) {
            return { language: 'zh', confidence: Math.min(chineseRatio * 3, 1) };
        }
        // Default to English
        return { language: 'en', confidence: 0.5 };
    }
    static isRTL(language) {
        return this.RTL_LANGUAGES.includes(language);
    }
    static getDirection(language) {
        return this.isRTL(language) ? 'rtl' : 'ltr';
    }
}
LanguageDetector.RTL_LANGUAGES = ['ar', 'he', 'ur', 'fa', 'bal'];
// Location detection utility
class LocationDetector {
    static async detectUserLocation() {
        try {
            // Use VisitorAPI for IP-based location detection
            const response = await fetch('https://ipapi.co/json/');
            const data = await response.json();
            if (data.country_name && data.country_name !== 'Unknown') {
                return {
                    country: data.country_name,
                    countryCode: data.country_code,
                    city: data.city || 'Unknown',
                    region: data.region || 'Unknown',
                    detectionMethod: 'ipapi',
                    confidence: 0.85
                };
            }
        }
        catch (error) {
            console.warn('[Widget] Location detection failed:', error);
        }
        return null;
    }
    static getCountryFlag(countryCode) {
        if (!countryCode || countryCode.length !== 2)
            return '';
        // Convert country code to flag emoji
        const codePoints = countryCode
            .toUpperCase()
            .split('')
            .map(char => 127397 + char.charCodeAt(0));
        return String.fromCodePoint(...codePoints);
    }
}
// Main Widget SDK Class
class AlHayatGPTWidget {
    constructor(config) {
        this.container = null;
        this.iframe = null;
        this.messages = [];
        this.isDestroyed = false;
        this.userLocation = null;
        this.currentLanguage = 'en';
        this.currentDirection = 'ltr';
        this.config = config;
        this.sourceWebsite = this.extractSourceWebsite();
        this.initialize();
    }
    extractSourceWebsite() {
        try {
            // Get the source website from the current window location
            return window.location.hostname || 'unknown-source';
        }
        catch (error) {
            return 'unknown-source';
        }
    }
    async initialize() {
        try {
            // Find container
            const container = document.getElementById(this.config.containerId);
            if (!container) {
                throw new WidgetError(`Container with id "${this.config.containerId}" not found`, ErrorCodes.CONTAINER_NOT_FOUND);
            }
            this.container = container;
            // Create and setup iframe
            await this.createIframe();
            // Detect user location
            this.userLocation = await LocationDetector.detectUserLocation();
            // Notify ready
            if (this.config.onReady) {
                this.config.onReady();
            }
            this.log('Widget initialized successfully');
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async createIframe() {
        if (!this.container)
            return;
        return new Promise((resolve, reject) => {
            const iframe = document.createElement('iframe');
            iframe.src = this.buildIframeUrl();
            iframe.style.width = '100%';
            iframe.style.height = this.config.height;
            iframe.style.border = 'none';
            iframe.style.borderRadius = '12px';
            iframe.style.backgroundColor = '#f9fafb';
            iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms');
            iframe.setAttribute('loading', 'lazy');
            const timeout = setTimeout(() => {
                reject(new WidgetError('Widget iframe failed to load within timeout', ErrorCodes.IFRAME_LOAD_FAILED));
            }, 15000);
            iframe.onload = () => {
                clearTimeout(timeout);
                this.iframe = iframe;
                this.setupMessageHandling();
                resolve(undefined);
            };
            iframe.onerror = () => {
                clearTimeout(timeout);
                reject(new WidgetError('Widget iframe failed to load', ErrorCodes.IFRAME_LOAD_FAILED));
            };
            // Clear container and add iframe
            if (this.container) {
                this.container.innerHTML = '';
                this.container.appendChild(iframe);
            }
        });
    }
    buildIframeUrl() {
        const baseUrl = this.getWidgetUrl();
        const params = new URLSearchParams({
            source: this.sourceWebsite,
            height: this.config.height,
            theme: this.config.theme || 'auto',
            embedded: 'true',
            guest: 'true'
        });
        return `${baseUrl}?${params.toString()}`;
    }
    getWidgetUrl() {
        // Always use the production widget domain - never use the embedding site's domain
        return 'https://www.alhayatgpt.com/widget/chat';
    }
    setupMessageHandling() {
        window.addEventListener('message', (event) => {
            if (this.isDestroyed || !this.iframe)
                return;
            // Verify origin for security
            const iframe = this.iframe;
            if (event.source !== iframe.contentWindow)
                return;
            this.handleIframeMessage(event.data);
        });
    }
    handleIframeMessage(data) {
        try {
            const { type, payload } = data;
            switch (type) {
                case 'WIDGET_READY':
                    this.log('Widget iframe ready');
                    break;
                case 'LANGUAGE_DETECTED':
                    this.handleLanguageDetection(payload);
                    break;
                case 'MESSAGE_SENT':
                    this.handleMessageSent(payload);
                    break;
                case 'ERROR':
                    this.handleError(new WidgetError(payload.message || 'Unknown error', payload.code || ErrorCodes.CHAT_ERROR, false, payload));
                    break;
                default:
                    this.log('Unknown message type:', type);
            }
        }
        catch (error) {
            this.log('Error handling iframe message:', error);
        }
    }
    handleLanguageDetection(payload) {
        if (payload.language && payload.direction) {
            this.currentLanguage = payload.language;
            this.currentDirection = payload.direction;
            // Update container direction
            if (this.container) {
                this.container.dir = payload.direction;
            }
            // Notify parent
            if (this.config.onLanguageDetected) {
                this.config.onLanguageDetected({
                    language: payload.language,
                    direction: payload.direction,
                    confidence: payload.confidence || 0.8
                });
            }
            this.log('Language detected:', payload);
        }
    }
    handleMessageSent(payload) {
        // Track message for analytics/debugging
        this.log('Message sent:', {
            content: payload.content?.substring(0, 50) + '...',
            language: this.currentLanguage,
            source: this.sourceWebsite
        });
    }
    handleError(error) {
        const widgetError = error instanceof WidgetError ? error : new WidgetError(error instanceof Error ? error.message : 'Unknown error', ErrorCodes.INITIALIZATION_FAILED);
        this.log('Widget error:', widgetError);
        if (this.config.onError) {
            this.config.onError(widgetError);
        }
        // Show user-friendly error in container
        this.showError(widgetError);
    }
    showError(error) {
        if (!this.container)
            return;
        const errorHtml = `
      <div style="
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: ${this.config.height};
        padding: 20px;
        background: #fef2f2;
        border-radius: 12px;
        border: 1px solid #fca5a5;
        color: #dc2626;
        font-family: system-ui, -apple-system, sans-serif;
        text-align: center;
      ">
        <div style="font-size: 24px; margin-bottom: 12px;">⚠️</div>
        <h3 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">
          Widget Error
        </h3>
        <p style="margin: 0; font-size: 14px; opacity: 0.8;">
          ${error.message}
        </p>
        ${error.code === ErrorCodes.DOMAIN_BLOCKED ? `
          <p style="margin: 8px 0 0 0; font-size: 12px; opacity: 0.6;">
            Contact support if you believe this is an error.
          </p>
        ` : ''}
      </div>
    `;
        this.container.innerHTML = errorHtml;
    }
    log(message, ...args) {
        if (this.config.debug) {
            console.log(`[AlHayatGPT Widget]`, message, ...args);
        }
    }
    // Public API methods
    destroy() {
        if (this.isDestroyed)
            return;
        this.isDestroyed = true;
        if (this.container) {
            this.container.innerHTML = '';
        }
        this.iframe = null;
        this.container = null;
        this.log('Widget destroyed');
    }
    getSourceWebsite() {
        return this.sourceWebsite;
    }
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    getCurrentDirection() {
        return this.currentDirection;
    }
    getUserLocation() {
        return this.userLocation;
    }
}
// Global SDK object
const AlHayatGPTSDK = {
    createWidget: (config) => {
        return new AlHayatGPTWidget(config);
    },
    version: '2.0.0',
    ErrorCodes,
    // Utility functions
    detectLanguage: LanguageDetector.detectLanguage.bind(LanguageDetector),
    isRTL: LanguageDetector.isRTL.bind(LanguageDetector),
    getCountryFlag: LocationDetector.getCountryFlag.bind(LocationDetector)
};
// Auto-attach to window for browser usage
if (typeof window !== 'undefined') {
    window.AlHayatGPT = AlHayatGPTSDK;
    // Dispatch ready event
    const event = new CustomEvent('AlHayatGPTSDKReady', {
        detail: { version: AlHayatGPTSDK.version }
    });
    window.dispatchEvent(event);
}
default AlHayatGPTSDK;

    
    // Auto-dispatch ready event
    if (typeof window !== 'undefined') {
        setTimeout(() => {
            const event = new CustomEvent('AlHayatGPTSDKReady', {
                detail: { 
                    version: '2.0.0',
                    features: [
                        'guest-only-mode',
                        'language-detection',
                        'source-tracking',
                        'sanity-sync',
                        'domain-control',
                        'html-rendering'
                    ]
                }
            });
            window.dispatchEvent(event);
            console.log('🚀 Al Hayat GPT Widget SDK v2.0 ready');
        }, 100);
    }
})();