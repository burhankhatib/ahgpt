(function(){'use strict';if (typeof window !== 'undefined' && window.AlHayatGPT){console.warn('[WidgetSDK] SDK already loaded,skipping re-initialization');return;}function debugLog(level,message,data = null){if (typeof console !== 'undefined' && console[level]){const timestamp = new Date().toISOString().slice(11,23);const logMessage = `[AlHayatGPT-SDK] ${timestamp}${message}`;if (data && (level === 'error' || level === 'warn')){console[level](logMessage,data);}else if (data && window.AlHayatGPT?.debug){console[level](logMessage,data);}else{console[level](logMessage);}}}const ErrorCodes = Object.freeze({CONTAINER_NOT_FOUND:'CONTAINER_NOT_FOUND',IFRAME_LOAD_FAILED:'IFRAME_LOAD_FAILED',SECURITY_VIOLATION:'SECURITY_VIOLATION',NETWORK_ERROR:'NETWORK_ERROR',TIMEOUT:'TIMEOUT',INVALID_CONFIG:'INVALID_CONFIG',INITIALIZATION_FAILED:'INITIALIZATION_FAILED'});class WidgetError extends Error{constructor(message,code,retryable = false,details = null){super(message);this.name = 'WidgetError';this.code = code;this.retryable = retryable;this.details = details;}}const widgetRegistry = new WeakMap();let globalInstanceCount = 0;class SecureTokenManager{static TOKEN_KEY = 'ahgpt_token';static NONCE_LENGTH = 16;static getToken(){if (typeof window === 'undefined') return null;try{const urlToken = new URLSearchParams(window.location.search).get('token');if (urlToken && this.validateToken(urlToken)){this.storeToken(urlToken);this.cleanUrl();return urlToken;}return this.retrieveStoredToken();}catch (error){debugLog('warn','Token retrieval failed:',error);return null;}}static validateToken(token){return typeof token === 'string' && token.length > 10 && /^[A-Za-z0-9._-]+$/.test(token);}static storeToken(token){try{localStorage.setItem(this.TOKEN_KEY,token);}catch (error){debugLog('warn','Token storage failed:',error);}}static retrieveStoredToken(){try{return localStorage.getItem(this.TOKEN_KEY);}catch (error){debugLog('warn','Token retrieval failed:',error);return null;}}static cleanUrl(){try{const url = new URL(window.location.href);if (url.searchParams.has('token')){url.searchParams.delete('token');window.history.replaceState({},document.title,url.toString());}}catch (error){debugLog('warn','URL cleanup failed:',error);}}static generateNonce(){const array = new Uint8Array(this.NONCE_LENGTH);crypto.getRandomValues(array);return Array.from(array,byte => byte.toString(16).padStart(2,'0')).join('');}}class SecurityValidator{static ALLOWED_PROTOCOLS = ['https:','http:'];static LOCALHOST_PATTERNS = ['localhost','127.0.0.1','::1'];static validateOrigin(origin,expectedOrigin){try{const originUrl = new URL(origin);const expectedUrl = new URL(expectedOrigin);if (this.isLocalhost(originUrl.hostname) || this.isLocalhost(expectedUrl.hostname)){return true;}return origin === expectedOrigin;}catch (error){debugLog('warn','Origin validation failed:',error);return false;}}static isLocalhost(hostname){return this.LOCALHOST_PATTERNS.includes(hostname);}static validateConfig(config){if (!config.containerId?.trim()){throw new WidgetError('Container ID is required',ErrorCodes.INVALID_CONFIG);}if (config.apiEndpoint){try{const url = new URL(config.apiEndpoint);if (!this.ALLOWED_PROTOCOLS.includes(url.protocol)){throw new WidgetError(`Invalid protocol:${url.protocol}`,ErrorCodes.SECURITY_VIOLATION);}}catch (error){throw new WidgetError(`Invalid API endpoint:${config.apiEndpoint}`,ErrorCodes.INVALID_CONFIG);}}}}class RetryManager{constructor(maxAttempts = 3,baseDelay = 1000){this.maxAttempts = maxAttempts;this.baseDelay = baseDelay;this.attempts = 0;}async execute(operation){while (this.attempts < this.maxAttempts){try{const result = await operation();this.reset();return result;}catch (error){this.attempts++;if (this.attempts >= this.maxAttempts){throw new WidgetError( `Operation failed after ${this.maxAttempts}attempts:${error.message || 'Unknown error'}`,ErrorCodes.INITIALIZATION_FAILED,false,{originalError:error,attempts:this.attempts});}const delay = this.baseDelay * Math.pow(2,this.attempts - 1);await this.sleep(delay);}}throw new WidgetError('Retry manager exhausted',ErrorCodes.INITIALIZATION_FAILED);}sleep(ms){return new Promise(resolve => setTimeout(resolve,ms));}reset(){this.attempts = 0;}}class AlHayatGPTWidget{constructor(config){debugLog('info','Widget constructor called',config);SecurityValidator.validateConfig(config);this.config = Object.freeze({apiEndpoint:typeof window !== 'undefined' ? window.location.origin:'https://www.alhayatgpt.com',theme:'auto',width:'100%',height:'600px',allowGuests:true,debug:false,retryAttempts:3,retryDelay:1000,...config});this.instanceId = `widget_${++globalInstanceCount}_${Date.now()}`;this.retryManager = new RetryManager(this.config.retryAttempts,this.config.retryDelay);this.nonce = SecureTokenManager.generateNonce();this.cleanupTasks = new Set();this.iframe = null;this.container = null;this.messageHandlers = new Map();this.messageEventHandler = null;this.isDestroyed = false;debugLog('info','Widget configuration validated',this.sanitizeConfigForLogging());this.initializeWidget().catch(error =>{this.handleError(error);});}async initializeWidget(){await this.retryManager.execute(async () =>{await this.findContainer();await this.createIframe();await this.setupMessageHandling();this.applyStyles();debugLog('info','Widget initialized successfully');this.config.onReady?.();});}async findContainer(){return new Promise((resolve,reject) =>{const attemptFind = () =>{this.container = document.getElementById(this.config.containerId);if (this.container){if (widgetRegistry.has(this.container)){const existingWidget = widgetRegistry.get(this.container);existingWidget?.destroy();}widgetRegistry.set(this.container,this);resolve();return;}reject(new WidgetError( `Container with ID "${this.config.containerId}" not found`,ErrorCodes.CONTAINER_NOT_FOUND,true ));};if (document.readyState === 'loading'){document.addEventListener('DOMContentLoaded',attemptFind,{once:true});this.addCleanupTask(() => document.removeEventListener('DOMContentLoaded',attemptFind));}else{attemptFind();}});}async createIframe(){if (!this.container){throw new WidgetError('Container not found',ErrorCodes.CONTAINER_NOT_FOUND);}this.container.innerHTML = '';this.iframe = document.createElement('iframe');const widgetUrl = new URL(`${this.config.apiEndpoint}/widget/chat`);widgetUrl.searchParams.set('theme',this.config.theme);widgetUrl.searchParams.set('allowGuests',this.config.allowGuests.toString());widgetUrl.searchParams.set('nonce',this.nonce);if (this.config.clerkPublishableKey){widgetUrl.searchParams.set('clerkKey',this.config.clerkPublishableKey);}widgetUrl.searchParams.set('parentOrigin',window.location.origin);this.iframe.src = widgetUrl.toString();this.iframe.style.cssText = ` width:${this.config.width};height:${this.config.height};border:none;border-radius:12px;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);display:block;`;this.iframe.setAttribute('sandbox','allow-scripts allow-same-origin allow-forms');this.iframe.setAttribute('allow','clipboard-write');this.iframe.setAttribute('loading','lazy');const loadPromise = new Promise((resolve,reject) =>{const timeout = setTimeout(() =>{reject(new WidgetError('Iframe load timeout',ErrorCodes.TIMEOUT,true));},15000);const cleanup = () =>{clearTimeout(timeout);this.iframe?.removeEventListener('load',onLoad);this.iframe?.removeEventListener('error',onError);};const onLoad = () =>{cleanup();resolve();};const onError = () =>{cleanup();reject(new WidgetError('Iframe failed to load',ErrorCodes.IFRAME_LOAD_FAILED,true));};this.iframe.addEventListener('load',onLoad,{once:true});this.iframe.addEventListener('error',onError,{once:true});this.addCleanupTask(cleanup);});this.container.appendChild(this.iframe);await loadPromise;}setupMessageHandling(){this.messageEventHandler = (event) =>{if (this.isDestroyed) return;if (!SecurityValidator.validateOrigin(event.origin,this.config.apiEndpoint)){debugLog('warn','Blocked message from unauthorized origin',{origin:event.origin});return;}const message = event.data;if (!message?.type){debugLog('warn','Invalid message received',{message});return;}if (['USER_SIGNED_IN','USER_SIGNED_OUT'].includes(message.type)){if (message.nonce !== this.nonce){debugLog('warn','Message nonce validation failed',{expected:this.nonce,received:message.nonce});return;}}this.handleMessage(message);};window.addEventListener('message',this.messageEventHandler,{passive:true});this.addCleanupTask(() =>{if (this.messageEventHandler){window.removeEventListener('message',this.messageEventHandler);}});}handleMessage(message){debugLog('info','Received message',{type:message.type});try{switch (message.type){case 'WIDGET_READY':this.config.onReady?.();break;case 'USER_SIGNED_IN':if (message.payload && typeof message.payload === 'object' && message.payload.id){this.config.onUserSignIn?.(message.payload);}break;case 'USER_SIGNED_OUT':this.config.onUserSignOut?.();break;case 'RESIZE':if (this.iframe && message.payload?.height){const height = Number(message.payload.height);if (height > 0 && height < 10000){this.iframe.style.height = `${height}px`;}}break;case 'ERROR':const error = new WidgetError( message.payload?.message || 'Widget error',message.payload?.code || 'UNKNOWN_ERROR',message.payload?.retryable || false,message.payload );this.handleError(error);break;}this.triggerEventHandlers(message.type,message.payload);}catch (error){this.handleError(error);}}triggerEventHandlers(eventType,payload){const handlers = this.messageHandlers.get(eventType);if (!handlers) return;const handlersCopy = Array.from(handlers);handlersCopy.forEach(handler =>{try{handler(payload);}catch (error){debugLog('error','Error in event handler',{eventType,error});}});}applyStyles(){if (!this.container || !this.config.customStyles) return;try{Object.entries(this.config.customStyles).forEach(([property,value]) =>{if (this.container && typeof value === 'string'){this.container.style.setProperty(property,value);}});}catch (error){debugLog('warn','Error applying custom styles',{error});}}handleError(error){const widgetError = error instanceof WidgetError ? error:new WidgetError( error?.message || 'Unknown error',ErrorCodes.INITIALIZATION_FAILED,false,{originalError:error});debugLog('error','Widget error',{error:widgetError});this.config.onError?.(widgetError);}addCleanupTask(task){this.cleanupTasks.add(task);}sanitizeConfigForLogging(){const{clerkPublishableKey,onReady,onUserSignIn,onUserSignOut,onError,...safe}= this.config;return{...safe,clerkPublishableKey:clerkPublishableKey ? '[REDACTED]':undefined,hasCallbacks:!!(onReady || onUserSignIn || onUserSignOut || onError)};}on(eventType,handler){if (this.isDestroyed || typeof eventType !== 'string' || typeof handler !== 'function'){return;}if (!this.messageHandlers.has(eventType)){this.messageHandlers.set(eventType,new Set());}this.messageHandlers.get(eventType).add(handler);debugLog('info','Event handler added',{eventType});}off(eventType,handler){const handlers = this.messageHandlers.get(eventType);if (handlers){handlers.delete(handler);if (handlers.size === 0){this.messageHandlers.delete(eventType);}debugLog('info','Event handler removed',{eventType});}}sendMessage(type,payload){if (this.isDestroyed || !this.iframe?.contentWindow) return;try{const message ={type,payload:payload ? Object.freeze({...payload}):undefined,timestamp:Date.now(),nonce:this.nonce};this.iframe.contentWindow.postMessage(message,this.config.apiEndpoint);debugLog('info','Message sent',{type});}catch (error){debugLog('error','Failed to send message',{type,error});}}updateConfig(newConfig){if (this.isDestroyed) return;SecurityValidator.validateConfig({...this.config,...newConfig});Object.assign(this.config,newConfig);this.sendMessage('UPDATE_CONFIG',newConfig);debugLog('info','Config updated');}destroy(){if (this.isDestroyed) return;debugLog('info','Destroying widget',{instanceId:this.instanceId});this.isDestroyed = true;this.cleanupTasks.forEach(task =>{try{task();}catch (error){debugLog('warn','Cleanup task failed',{error});}});this.cleanupTasks.clear();if (this.iframe){this.iframe.remove();this.iframe = null;}if (this.container){widgetRegistry.delete(this.container);this.container = null;}this.messageHandlers.clear();this.messageEventHandler = null;globalInstanceCount = Math.max(0,globalInstanceCount - 1);debugLog('info','Widget destroyed successfully');}isReady(){return !this.isDestroyed && !!this.iframe && !!this.container;}getInstanceId(){return this.instanceId;}static getActiveWidgetCount(){return globalInstanceCount;}}if (typeof window !== 'undefined'){window.AlHayatGPT = Object.freeze({createWidget:function(config){debugLog('info','createWidget called');try{return new AlHayatGPTWidget(config);}catch (error){debugLog('error','Error creating widget:',error);throw error;}},version:'2.0.0-optimized',ErrorCodes:Object.freeze(ErrorCodes),getActiveWidgetCount:() => globalInstanceCount,debug:false});window.addEventListener('beforeunload',() =>{debugLog('info','Page unloading,widgets will be cleaned up');});if (typeof CustomEvent !== 'undefined'){try{const event = new CustomEvent('AlHayatGPTSDKReady',{detail:{version:'2.0.0-optimized'}});window.dispatchEvent(event);debugLog('info','AlHayatGPTSDKReady event dispatched');}catch (e){debugLog('warn','Could not dispatch custom event:',e);}}debugLog('info','Al Hayat GPT Widget SDK v2.0.0-optimized loaded successfully');}})();