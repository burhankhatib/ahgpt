"use strict";(()=>{if(window.AlHayatGPT)console.warn("Al Hayat GPT SDK has already been loaded. Please include the script only once.");else{let i=function(){if(document.querySelector('link[href="https://www.alhayatgpt.com/api/globals.css"]'))return;let t=document.createElement("link");t.rel="stylesheet",t.href="https://www.alhayatgpt.com/api/globals.css",t.type="text/css",t.onerror=()=>{console.warn("Al Hayat GPT SDK: Could not load external CSS. Widget will use default styling.")},document.head.appendChild(t),console.log("Al Hayat GPT SDK: External CSS loaded for consistent styling.")},r=function(e){if(!e.containerId){console.error("Al Hayat GPT SDK: `containerId` is a required option.");return}let t=document.getElementById(e.containerId);if(!t){console.error(`Al Hayat GPT SDK: Container element with id '${e.containerId}' not found.`);return}i();let a=document.createElement("iframe"),d=e.widgetBaseUrl||"https://www.alhayatgpt.com/widget/chat",o=new URL(d);o.searchParams.append("source",window.location.hostname),a.src=o.toString(),a.id="alhayat-gpt-widget-iframe",a.title="Al Hayat GPT Chat Widget",a.style.border="none",a.style.width=e.width||"100%",a.style.height=e.height||"100%",a.style.display="block",a.setAttribute("allow","geolocation"),e.style&&Object.entries(e.style).forEach(([l,s])=>{if(s!==void 0){let c=l.replace(/([A-Z])/g,"-$1").toLowerCase();a.style.setProperty(c,s)}}),t.innerHTML="",t.appendChild(a),console.log(`Al Hayat GPT Widget created successfully in container #${e.containerId}`)},n=function(){let e=window.AlHayatGPT;e._isReady=!0,e._readyQueue.forEach(t=>t()),e._readyQueue=[]};y=i,g=r,u=n,window.AlHayatGPT={_isReady:!1,_readyQueue:[],createWidget:function(e){if(!this._isReady){this._readyQueue.push(()=>this.createWidget(e));return}r(e)}},document.readyState==="loading"?document.addEventListener("DOMContentLoaded",n):n(),window.dispatchEvent(new CustomEvent("AlHayatGPTSDKReady")),console.log("Al Hayat GPT SDK v3.0 is ready.")}var y,g,u;})();
//# sourceMappingURL=data:application/json;base64,
