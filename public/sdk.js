"use strict";(()=>{if(window.AlHayatGPT)console.warn("Al Hayat GPT SDK has already been loaded. Please include the script only once.");else{let i=function(e){if(!e.containerId){console.error("Al Hayat GPT SDK: `containerId` is a required option.");return}let a=document.getElementById(e.containerId);if(!a){console.error(`Al Hayat GPT SDK: Container element with id '${e.containerId}' not found.`);return}let t=document.createElement("iframe"),o=e.widgetBaseUrl||"https://www.alhayatgpt.com/widget/chat",r=new URL(o);r.searchParams.append("source",window.location.hostname),t.src=r.toString(),t.id="alhayat-gpt-widget-iframe",t.title="Al Hayat GPT Chat Widget",t.style.border="none",t.style.width=e.width||"100%",t.style.height=e.height||"100%",t.style.display="block",t.setAttribute("allow","geolocation"),e.style&&Object.entries(e.style).forEach(([s,d])=>{if(d!==void 0){let l=s.replace(/([A-Z])/g,"-$1").toLowerCase();t.style.setProperty(l,d)}}),a.innerHTML="",a.appendChild(t),console.log(`Al Hayat GPT Widget created successfully in container #${e.containerId}`)},n=function(){let e=window.AlHayatGPT;e._isReady=!0,e._readyQueue.forEach(a=>a()),e._readyQueue=[]};c=i,y=n,window.AlHayatGPT={_isReady:!1,_readyQueue:[],createWidget:function(e){if(!this._isReady){this._readyQueue.push(()=>this.createWidget(e));return}i(e)}},document.readyState==="loading"?document.addEventListener("DOMContentLoaded",n):n(),window.dispatchEvent(new CustomEvent("AlHayatGPTSDKReady")),console.log("Al Hayat GPT SDK v3.0 is ready.")}var c,y;})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3Nkay9zZGsudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQWwgSGF5YXQgR1BUIFdpZGdldCBTREsgdjMuMFxuICogXG4gKiBBIG1pbmltYWxpc3QsIGRlcGVuZGVuY3ktZnJlZSBTREsgZm9yIGVtYmVkZGluZyB0aGUgQWwgSGF5YXQgR1BUIFdpZGdldC5cbiAqIFRoaXMgc2NyaXB0IGhhbmRsZXMgdGhlIGNyZWF0aW9uIG9mIHRoZSB3aWRnZXQncyBpZnJhbWUgYW5kIHByb3ZpZGVzIGEgc2ltcGxlLFxuICogc3RhYmxlIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpb24uXG4gKiBcbiAqIENvcmUgUHJpbmNpcGxlczpcbiAqIDEuIFplcm8gRGVwZW5kZW5jaWVzOiBSdW5zIGluIGFueSBicm93c2VyIGVudmlyb25tZW50IHdpdGhvdXQgZXh0ZXJuYWwgbGlicmFyaWVzLlxuICogMi4gTWF4aW11bSBDb21wYXRpYmlsaXR5OiBVc2VzIHN0YW5kYXJkLCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYnJvd3NlciBBUElzLlxuICogMy4gUm9idXN0IExvYWRpbmc6IEVuc3VyZXMgdGhlIHdpZGdldCBjYW4gYmUgZW1iZWRkZWQgb24gYW55IHdlYnNpdGUuXG4gKiA0LiBTaW1wbGUgQVBJOiBFYXN5IHRvIHVzZSBhbmQgdW5kZXJzdGFuZC5cbiAqL1xuXG4vLyBEZWZpbmUgdGhlIHNoYXBlIG9mIHRoZSBwdWJsaWMgQVBJIHRoYXQgd2lsbCBiZSBleHBvc2VkIG9uIHRoZSB3aW5kb3cgb2JqZWN0LlxuaW50ZXJmYWNlIEFsSGF5YXRHUFRTREsge1xuICAgIGNyZWF0ZVdpZGdldDogKG9wdGlvbnM6IFdpZGdldE9wdGlvbnMpID0+IHZvaWQ7XG4gICAgX2lzUmVhZHk6IGJvb2xlYW47XG4gICAgX3JlYWR5UXVldWU6IEFycmF5PCgpID0+IHZvaWQ+O1xufVxuXG4vLyBEZWZpbmUgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgY3JlYXRpbmcgYSB3aWRnZXQuXG5pbnRlcmZhY2UgV2lkZ2V0T3B0aW9ucyB7XG4gICAgY29udGFpbmVySWQ6IHN0cmluZztcbiAgICB3aWRnZXRCYXNlVXJsPzogc3RyaW5nO1xuICAgIGhlaWdodD86IHN0cmluZztcbiAgICB3aWR0aD86IHN0cmluZztcbiAgICBzdHlsZT86IHtcbiAgICAgICAgYm9yZGVyPzogc3RyaW5nO1xuICAgICAgICBib3JkZXJSYWRpdXM/OiBzdHJpbmc7XG4gICAgICAgIGJveFNoYWRvdz86IHN0cmluZztcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIH07XG59XG5cbi8vIENoZWNrIGlmIHRoZSBTREsgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZCB0byBwcmV2ZW50IGNvbmZsaWN0cy5cbmlmICgod2luZG93IGFzIGFueSkuQWxIYXlhdEdQVCkge1xuICAgIGNvbnNvbGUud2FybihcIkFsIEhheWF0IEdQVCBTREsgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQuIFBsZWFzZSBpbmNsdWRlIHRoZSBzY3JpcHQgb25seSBvbmNlLlwiKTtcbn0gZWxzZSB7XG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgU0RLIG9uIHRoZSB3aW5kb3cgb2JqZWN0LlxuICAgICh3aW5kb3cgYXMgYW55KS5BbEhheWF0R1BUID0ge1xuICAgICAgICBfaXNSZWFkeTogZmFsc2UsXG4gICAgICAgIF9yZWFkeVF1ZXVlOiBbXSwgLy8gQSBxdWV1ZSBmb3IgZnVuY3Rpb24gY2FsbHMgbWFkZSBiZWZvcmUgdGhlIFNESyBpcyBmdWxseSByZWFkeS5cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHByaW1hcnkgcHVibGljIG1ldGhvZCB0byBjcmVhdGUgYW5kIGVtYmVkIHRoZSB3aWRnZXQuXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQ29uZmlndXJhdGlvbiBmb3IgdGhlIHdpZGdldC5cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVdpZGdldDogZnVuY3Rpb24ob3B0aW9uczogV2lkZ2V0T3B0aW9ucykge1xuICAgICAgICAgICAgLy8gSWYgdGhlIFNESyBpc24ndCBmdWxseSByZWFkeSwgcXVldWUgdGhlIGNhbGwuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzUmVhZHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeVF1ZXVlLnB1c2goKCkgPT4gdGhpcy5jcmVhdGVXaWRnZXQob3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByb2NlZWQgd2l0aCB3aWRnZXQgY3JlYXRpb24uXG4gICAgICAgICAgICBfY3JlYXRlV2lkZ2V0KG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSBhcyBBbEhheWF0R1BUU0RLO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGludGVybmFsIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyB0aGUgYWN0dWFsIHdpZGdldCBjcmVhdGlvbi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSB3aWRnZXQgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfY3JlYXRlV2lkZ2V0KG9wdGlvbnM6IFdpZGdldE9wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgdGhhdCBhIGNvbnRhaW5lciBJRCB3YXMgcHJvdmlkZWQuXG4gICAgICAgIGlmICghb3B0aW9ucy5jb250YWluZXJJZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkFsIEhheWF0IEdQVCBTREs6IGBjb250YWluZXJJZGAgaXMgYSByZXF1aXJlZCBvcHRpb24uXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCB0aGUgY29udGFpbmVyIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5jb250YWluZXJJZCk7XG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBBbCBIYXlhdCBHUFQgU0RLOiBDb250YWluZXIgZWxlbWVudCB3aXRoIGlkICcke29wdGlvbnMuY29udGFpbmVySWR9JyBub3QgZm91bmQuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyAtLS0gQ29yZSBJZnJhbWUgQ3JlYXRpb24gLS0tXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXG4gICAgICAgIC8vIENvbnN0cnVjdCB0aGUgd2lkZ2V0IFVSTC4gVGhlIGBzb3VyY2VgIHBhcmFtZXRlciBpcyBjcnVjaWFsIGZvciBpZGVudGlmeWluZyB0aGUgaG9zdCBwYWdlLlxuICAgICAgICBjb25zdCBiYXNlVXJsID0gb3B0aW9ucy53aWRnZXRCYXNlVXJsIHx8ICdodHRwczovL3d3dy5hbGhheWF0Z3B0LmNvbS93aWRnZXQvY2hhdCc7XG4gICAgICAgIGNvbnN0IHdpZGdldFVybCA9IG5ldyBVUkwoYmFzZVVybCk7XG4gICAgICAgIHdpZGdldFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdzb3VyY2UnLCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IGlmcmFtZSBhdHRyaWJ1dGVzIGZvciBwcm9wZXIgZnVuY3Rpb25hbGl0eSBhbmQgYXBwZWFyYW5jZS5cbiAgICAgICAgaWZyYW1lLnNyYyA9IHdpZGdldFVybC50b1N0cmluZygpO1xuICAgICAgICBpZnJhbWUuaWQgPSAnYWxoYXlhdC1ncHQtd2lkZ2V0LWlmcmFtZSc7XG4gICAgICAgIGlmcmFtZS50aXRsZSA9ICdBbCBIYXlhdCBHUFQgQ2hhdCBXaWRnZXQnO1xuICAgICAgICBpZnJhbWUuc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xuICAgICAgICBpZnJhbWUuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoIHx8ICcxMDAlJztcbiAgICAgICAgaWZyYW1lLnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8ICcxMDAlJztcbiAgICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOyAvLyBFbnN1cmUgcHJvcGVyIGRpc3BsYXlcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYWxsb3cnLCAnZ2VvbG9jYXRpb24nKTsgLy8gUmVxdWVzdCBwZXJtaXNzaW9uIGZvciBnZW9sb2NhdGlvbiBpZiBuZWVkZWQuXG5cbiAgICAgICAgLy8gQXBwbHkgYWRkaXRpb25hbCBjdXN0b20gc3R5bGVzIGlmIHByb3ZpZGVkXG4gICAgICAgIGlmIChvcHRpb25zLnN0eWxlKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhvcHRpb25zLnN0eWxlKS5mb3JFYWNoKChbcHJvcGVydHksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgY2FtZWxDYXNlIHRvIGtlYmFiLWNhc2UgZm9yIENTUyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc1Byb3BlcnR5ID0gcHJvcGVydHkucmVwbGFjZSgvKFtBLVpdKS9nLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lLnN0eWxlLnNldFByb3BlcnR5KGNzc1Byb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhciB0aGUgY29udGFpbmVyIGFuZCBhcHBlbmQgdGhlIG5ldyBpZnJhbWUuXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYEFsIEhheWF0IEdQVCBXaWRnZXQgY3JlYXRlZCBzdWNjZXNzZnVsbHkgaW4gY29udGFpbmVyICMke29wdGlvbnMuY29udGFpbmVySWR9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gcHJvY2VzcyBhbnkgY2FsbHMgdGhhdCB3ZXJlIHF1ZXVlZCB3aGlsZSB0aGUgU0RLIHdhcyBsb2FkaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9wcm9jZXNzUmVhZHlRdWV1ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2RrID0gKHdpbmRvdyBhcyBhbnkpLkFsSGF5YXRHUFQgYXMgQWxIYXlhdEdQVFNESztcbiAgICAgICAgc2RrLl9pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgc2RrLl9yZWFkeVF1ZXVlLmZvckVhY2goZm4gPT4gZm4oKSk7IC8vIEV4ZWN1dGUgYWxsIHF1ZXVlZCBmdW5jdGlvbnMuXG4gICAgICAgIHNkay5fcmVhZHlRdWV1ZSA9IFtdOyAvLyBDbGVhciB0aGUgcXVldWUuXG4gICAgfVxuXG4gICAgLy8gVXNlICdET01Db250ZW50TG9hZGVkJyB0byBlbnN1cmUgdGhlIERPTSBpcyByZWFkeSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgcXVldWUuXG4gICAgLy8gVGhpcyBpcyBtb3JlIHJlbGlhYmxlIHRoYW4gJ3dpbmRvdy5vbmxvYWQnLlxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIF9wcm9jZXNzUmVhZHlRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIERPTSBpcyBhbHJlYWR5IGxvYWRlZCwgcHJvY2VzcyB0aGUgcXVldWUgaW1tZWRpYXRlbHkuXG4gICAgICAgIF9wcm9jZXNzUmVhZHlRdWV1ZSgpO1xuICAgIH1cblxuICAgIC8vIEFubm91bmNlIHRoYXQgdGhlIFNESyBpcyByZWFkeSBieSBkaXNwYXRjaGluZyBhIGN1c3RvbSBldmVudC5cbiAgICAvLyBUaGlzIGFsbG93cyBob3N0IHBhZ2VzIHRvIHJlbGlhYmx5IGxpc3RlbiBmb3IgdGhlIFNESydzIGF2YWlsYWJpbGl0eS5cbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0FsSGF5YXRHUFRTREtSZWFkeScpKTtcbiAgICBjb25zb2xlLmxvZyhcIkFsIEhheWF0IEdQVCBTREsgdjMuMCBpcyByZWFkeS5cIik7XG59ICJdLAogICJtYXBwaW5ncyI6ICJtQkFvQ0EsR0FBSyxPQUFlLFdBQ2hCLFFBQVEsS0FBSyxnRkFBZ0YsTUFDMUYsQ0F5QkgsSUFBU0EsRUFBVCxTQUF1QkMsRUFBOEIsQ0FFakQsR0FBSSxDQUFDQSxFQUFRLFlBQWEsQ0FDdEIsUUFBUSxNQUFNLHVEQUF1RCxFQUNyRSxNQUNKLENBR0EsSUFBTUMsRUFBWSxTQUFTLGVBQWVELEVBQVEsV0FBVyxFQUM3RCxHQUFJLENBQUNDLEVBQVcsQ0FDWixRQUFRLE1BQU0sZ0RBQWdERCxFQUFRLFdBQVcsY0FBYyxFQUMvRixNQUNKLENBR0EsSUFBTUUsRUFBUyxTQUFTLGNBQWMsUUFBUSxFQUd4Q0MsRUFBVUgsRUFBUSxlQUFpQix5Q0FDbkNJLEVBQVksSUFBSSxJQUFJRCxDQUFPLEVBQ2pDQyxFQUFVLGFBQWEsT0FBTyxTQUFVLE9BQU8sU0FBUyxRQUFRLEVBR2hFRixFQUFPLElBQU1FLEVBQVUsU0FBUyxFQUNoQ0YsRUFBTyxHQUFLLDRCQUNaQSxFQUFPLE1BQVEsMkJBQ2ZBLEVBQU8sTUFBTSxPQUFTLE9BQ3RCQSxFQUFPLE1BQU0sTUFBUUYsRUFBUSxPQUFTLE9BQ3RDRSxFQUFPLE1BQU0sT0FBU0YsRUFBUSxRQUFVLE9BQ3hDRSxFQUFPLE1BQU0sUUFBVSxRQUN2QkEsRUFBTyxhQUFhLFFBQVMsYUFBYSxFQUd0Q0YsRUFBUSxPQUNSLE9BQU8sUUFBUUEsRUFBUSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUNLLEVBQVVDLENBQUssSUFBTSxDQUN6RCxHQUFJQSxJQUFVLE9BQVcsQ0FFckIsSUFBTUMsRUFBY0YsRUFBUyxRQUFRLFdBQVksS0FBSyxFQUFFLFlBQVksRUFDcEVILEVBQU8sTUFBTSxZQUFZSyxFQUFhRCxDQUFLLENBQy9DLENBQ0osQ0FBQyxFQUlMTCxFQUFVLFVBQVksR0FDdEJBLEVBQVUsWUFBWUMsQ0FBTSxFQUU1QixRQUFRLElBQUksMERBQTBERixFQUFRLFdBQVcsRUFBRSxDQUMvRixFQUtTUSxFQUFULFVBQW9DLENBQ2hDLElBQU1DLEVBQU8sT0FBZSxXQUM1QkEsRUFBSSxTQUFXLEdBQ2ZBLEVBQUksWUFBWSxRQUFRQyxHQUFNQSxFQUFHLENBQUMsRUFDbENELEVBQUksWUFBYyxDQUFDLENBQ3ZCLEVBMURTVixJQXFEQVMsSUE1RVIsT0FBZSxXQUFhLENBQ3pCLFNBQVUsR0FDVixZQUFhLENBQUMsRUFNZCxhQUFjLFNBQVNSLEVBQXdCLENBRTNDLEdBQUksQ0FBQyxLQUFLLFNBQVUsQ0FDaEIsS0FBSyxZQUFZLEtBQUssSUFBTSxLQUFLLGFBQWFBLENBQU8sQ0FBQyxFQUN0RCxNQUNKLENBRUFELEVBQWNDLENBQU8sQ0FDekIsQ0FDSixFQW9FSSxTQUFTLGFBQWUsVUFDeEIsU0FBUyxpQkFBaUIsbUJBQW9CUSxDQUFrQixFQUdoRUEsRUFBbUIsRUFLdkIsT0FBTyxjQUFjLElBQUksWUFBWSxvQkFBb0IsQ0FBQyxFQUMxRCxRQUFRLElBQUksaUNBQWlDLENBQ2pELENBekVhLElBQUFULEVBcURBUyIsCiAgIm5hbWVzIjogWyJfY3JlYXRlV2lkZ2V0IiwgIm9wdGlvbnMiLCAiY29udGFpbmVyIiwgImlmcmFtZSIsICJiYXNlVXJsIiwgIndpZGdldFVybCIsICJwcm9wZXJ0eSIsICJ2YWx1ZSIsICJjc3NQcm9wZXJ0eSIsICJfcHJvY2Vzc1JlYWR5UXVldWUiLCAic2RrIiwgImZuIl0KfQo=
