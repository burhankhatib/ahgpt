// Location detection utility based on UserLocation.tsx component
// Uses browser geolocation with ipwho.is fallback

export interface LocationData {
    latitude?: number;
    longitude?: number;
    city?: string;
    region?: string;
    country: string;
    countryCode?: string;
    timezone?: string;
    ip?: string;
    source: "geolocation" | "ip" | "unknown";
    detectionMethod: 'browser-geolocation';
    confidence: 'high' | 'medium' | 'low';
    detectedAt: string;
}

// Main location detection function - same logic as UserLocation.tsx
export const detectUserLocation = (): Promise<LocationData | null> => {
    return new Promise((resolve) => {
        console.log('üåç Starting browser-based location detection...');

        const getLocationFromBrowser = () => {
            if (!navigator.geolocation) {
                console.warn('‚ùå Geolocation not supported by browser');
                getLocationFromIP();
                return;
            }

            console.log('üìç Requesting browser geolocation permission...');
            navigator.geolocation.getCurrentPosition(
                async (position) => {
                    console.log('‚úÖ Browser geolocation successful');
                    const { latitude, longitude, accuracy } = position.coords;
                    
                    const locationData: LocationData = {
                        latitude,
                        longitude,
                        country: 'Unknown', // Will be enriched if needed
                        source: "geolocation",
                        detectionMethod: 'browser-geolocation',
                        confidence: accuracy && accuracy < 100 ? 'high' : 'medium',
                        detectedAt: new Date().toISOString()
                    };

                    console.log('üìç Browser geolocation data:', locationData);
                    resolve(locationData);
                },
                async (error) => {
                    console.warn('‚ö†Ô∏è Geolocation denied/failed, falling back to IP...', error.message);
                    getLocationFromIP();
                },
                { 
                    timeout: 10000,
                    enableHighAccuracy: true,
                    maximumAge: 300000 // 5 minutes
                }
            );
        };

        const getLocationFromIP = async () => {
            try {
                console.log('üåê Fetching location from IP using ipwho.is...');
                const response = await fetch("https://ipwho.is/");
                const data = await response.json();

                console.log('üåê IP location response:', data);

                if (data.success) {
                    const locationData: LocationData = {
                        latitude: data.latitude,
                        longitude: data.longitude,
                        city: data.city,
                        region: data.region,
                        country: data.country,
                        countryCode: data.country_code,
                        timezone: data.timezone?.id,
                        ip: data.ip,
                        source: "ip",
                        detectionMethod: 'browser-geolocation',
                        confidence: 'medium',
                        detectedAt: new Date().toISOString()
                    };

                    console.log('‚úÖ IP location detection successful:', locationData);
                    resolve(locationData);
                } else {
                    console.error('‚ùå IP location API failed:', data);
                    resolve({
                        country: 'Unknown',
                        source: "unknown",
                        detectionMethod: 'browser-geolocation',
                        confidence: 'low',
                        detectedAt: new Date().toISOString()
                    });
                }
            } catch (error) {
                console.error('‚ùå Error fetching IP location:', error);
                resolve({
                    country: 'Unknown',
                    source: "unknown",
                    detectionMethod: 'browser-geolocation',
                    confidence: 'low',
                    detectedAt: new Date().toISOString()
                });
            }
        };

        // Start with browser geolocation
        getLocationFromBrowser();
    });
};

// Country flag utility
export const getCountryFlag = (countryCode: string): string => {
    if (!countryCode || countryCode.length !== 2) return 'üåç';
    
    const flags: Record<string, string> = {
        'US': 'üá∫üá∏', 'CA': 'üá®üá¶', 'GB': 'üá¨üáß', 'DE': 'üá©üá™', 'FR': 'üá´üá∑',
        'IT': 'üáÆüáπ', 'ES': 'üá™üá∏', 'NL': 'üá≥üá±', 'SE': 'üá∏üá™', 'NO': 'üá≥üá¥',
        'FI': 'üá´üáÆ', 'DK': 'üá©üá∞', 'PL': 'üáµüá±', 'RU': 'üá∑üá∫', 'UA': 'üá∫üá¶',
        'CN': 'üá®üá≥', 'JP': 'üáØüáµ', 'KR': 'üá∞üá∑', 'IN': 'üáÆüá≥', 'TH': 'üáπüá≠',
        'VN': 'üáªüá≥', 'ID': 'üáÆüá©', 'MX': 'üá≤üáΩ', 'BR': 'üáßüá∑', 'AR': 'üá¶üá∑',
        'EG': 'üá™üá¨', 'ZA': 'üáøüá¶', 'AU': 'üá¶üá∫', 'NZ': 'üá≥üáø',
        // Middle East
        'IR': 'üáÆüá∑', 'IL': 'üáÆüá±', 'PS': 'üáµüá∏', 'TR': 'üáπüá∑', 'SA': 'üá∏üá¶',
        'AE': 'üá¶üá™', 'JO': 'üáØüá¥', 'LB': 'üá±üáß', 'SY': 'üá∏üáæ', 'IQ': 'üáÆüá∂',
        'KW': 'üá∞üáº', 'QA': 'üá∂üá¶', 'BH': 'üáßüá≠', 'OM': 'üá¥üá≤', 'YE': 'üáæüá™'
    };
    
    return flags[countryCode.toUpperCase()] || 'üåç';
};

// Utility function to clear location cache
export const clearLocationCache = () => {
    console.log('üßπ Clearing location cache...');
    
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.includes('userLocation')) {
            keysToRemove.push(key);
        }
    }
    
    keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è Removed cache key: ${key}`);
    });
    
    console.log(`‚úÖ Cache clearing complete. Removed ${keysToRemove.length} keys`);
    return keysToRemove.length;
}; 